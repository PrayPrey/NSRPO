name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Cache Hugging Face models
      uses: actions/cache@v3
      with:
        path: ~/.cache/huggingface
        key: ${{ runner.os }}-huggingface-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-huggingface-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Verify installation
      run: |
        python verify_installation.py
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Format check with black
      run: |
        black --check --diff .
      continue-on-error: true
    
    - name: Import sort check with isort
      run: |
        isort --check-only --diff .
      continue-on-error: true
    
    - name: Run smoke tests
      run: |
        pytest tests/ -v -m smoke --tb=short
    
    - name: Run all tests with coverage
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Test training script (fast mode)
      run: |
        python train.py --fast --cpu_only --max_steps 5 --output_dir ./test_output
    
    - name: Test evaluation script (fast mode)
      run: |
        python evaluate.py --model_path gpt2 --fast --cpu_only --output_path ./test_eval_results.json
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          .coverage
          coverage.xml
          test_output/
          test_eval_results.json
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-cpu.txt
        pip install -r requirements-dev.txt
    
    - name: Run comprehensive evaluation (smoke)
      run: |
        python run_comprehensive_evaluation.py --fast --output-dir ./comprehensive_test_output
      continue-on-error: true
    
    - name: Check outputs
      run: |
        ls -la ./comprehensive_test_output || true
        ls -la ./test_output || true

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: false  # Disabled until Dockerfile is created
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: |
        docker build -t nsrpo:test .
    
    - name: Run Docker container test
      run: |
        docker run --rm nsrpo:test python verify_installation.py